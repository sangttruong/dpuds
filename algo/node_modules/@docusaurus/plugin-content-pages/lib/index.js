"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateOptions = void 0;
const globby_1 = __importDefault(require("globby"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@docusaurus/utils");
const pluginOptionSchema_1 = require("./pluginOptionSchema");
function pluginContentPages(context, options) {
    const contentPath = path_1.default.resolve(context.siteDir, options.path);
    return {
        name: 'docusaurus-plugin-content-pages',
        getPathsToWatch() {
            const { include = [] } = options;
            const globPattern = include.map((pattern) => `${contentPath}/${pattern}`);
            return [...globPattern];
        },
        async loadContent() {
            const { include } = options;
            const { siteConfig, siteDir } = context;
            const pagesDir = contentPath;
            if (!fs_1.default.existsSync(pagesDir)) {
                return null;
            }
            const { baseUrl } = siteConfig;
            const pagesFiles = await globby_1.default(include, {
                cwd: pagesDir,
            });
            return pagesFiles.map((relativeSource) => {
                const source = path_1.default.join(pagesDir, relativeSource);
                const aliasedSource = utils_1.aliasedSitePath(source, siteDir);
                const pathName = utils_1.encodePath(utils_1.fileToPath(relativeSource));
                // Default Language.
                return {
                    permalink: pathName.replace(/^\//, baseUrl || ''),
                    source: aliasedSource,
                };
            });
        },
        async contentLoaded({ content, actions }) {
            if (!content) {
                return;
            }
            const { addRoute } = actions;
            await Promise.all(content.map(async (metadataItem) => {
                const { permalink, source } = metadataItem;
                addRoute({
                    path: permalink,
                    component: source,
                    exact: true,
                    modules: {
                        config: `@generated/docusaurus.config`,
                    },
                });
            }));
        },
    };
}
exports.default = pluginContentPages;
function validateOptions({ validate, options, }) {
    const validatedOptions = validate(pluginOptionSchema_1.PluginOptionSchema, options);
    return validatedOptions;
}
exports.validateOptions = validateOptions;
