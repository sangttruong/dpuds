{"remainingRequest":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/share_data/create-amphora.md","dependencies":[{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/share_data/create-amphora.md","mtime":1599492777890},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/.docusaurus/docusaurus-plugin-content-docs/site-docs-share-data-create-amphora-md-489.json","mtime":1599493348178},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/cache-loader/dist/cjs.js","mtime":1599485341520},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js","mtime":1599485341450},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1599485356244},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1599485355668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgdmFyIGZyb250TWF0dGVyPXtpZDonY3JlYXRlLWFtcGhvcmEnLHRpdGxlOidDcmVhdGUgYW4gQW1waG9yYScsc2lkZWJhcl9sYWJlbDonQ3JlYXRlIEFtcGhvcmEnfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6InNoYXJlX2RhdGEvY3JlYXRlLWFtcGhvcmEiLCJpZCI6InNoYXJlX2RhdGEvY3JlYXRlLWFtcGhvcmEiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiQ3JlYXRlIGFuIEFtcGhvcmEiLCJkZXNjcmlwdGlvbiI6IkFuIEFtcGhvcmEgaXMgYSBzdGFuZGFyZGlzZWQgZGF0YSBjb250YWluZXIuIFRvIHNoYXJlIHlvdXIgZGF0YSwgeW91IG5lZWQgdG8gY3JlYXRlIGFuIEFtcGhvcmEgdGhlbiBmaWxsIGl0IHdpdGggd2hhdGV2ZXIgZGF0YSB5b3Ugd2FudC4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL3NoYXJlX2RhdGEvY3JlYXRlLWFtcGhvcmEubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9zaGFyZV9kYXRhL2NyZWF0ZS1hbXBob3JhIiwiZWRpdFVybCI6Imh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9kb2N1c2F1cnVzL2VkaXQvbWFzdGVyL3dlYnNpdGUvZG9jcy9zaGFyZV9kYXRhL2NyZWF0ZS1hbXBob3JhLm1kIiwic2lkZWJhcl9sYWJlbCI6IkNyZWF0ZSBBbXBob3JhIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJSYWlzZSBhbiBpc3N1ZSBpbiBHaXRIdWIiLCJwZXJtYWxpbmsiOiIvZG9jcy9nZXRfZGF0YS9naXRodWItaXNzdWUifSwibmV4dCI6eyJ0aXRsZSI6IkFkZCBGaWxlIHRvIEFtcGhvcmEiLCJwZXJtYWxpbmsiOiIvZG9jcy9zaGFyZV9kYXRhL2FkZC1maWxlIn19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IHZhciByaWdodFRvYz1be3ZhbHVlOidDcmVhdGUgdGhlIEFtcGhvcmEnLGlkOidjcmVhdGUtdGhlLWFtcGhvcmEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1NldCB0ZXJtcyBhbmQgY29uZGl0aW9ucycsaWQ6J3NldC10ZXJtcy1hbmQtY29uZGl0aW9ucycsY2hpbGRyZW46W119LHt2YWx1ZTonVGlwcyBmb3IgYmVzdCBwcmFjdGljZScsaWQ6J3RpcHMtZm9yLWJlc3QtcHJhY3RpY2UnLGNoaWxkcmVuOltdfV07dmFyIG1ha2VTaG9ydGNvZGU9ZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKXtyZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307fTt2YXIgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jOnJpZ2h0VG9jfTt2YXIgTURYTGF5b3V0PSJ3cmFwcGVyIjtleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KF9yZWYpe3ZhciBjb21wb25lbnRzPV9yZWYuY29tcG9uZW50cyxwcm9wcz1fb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLFsiY29tcG9uZW50cyJdKTtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsIkFuIEFtcGhvcmEgaXMgYSBzdGFuZGFyZGlzZWQgZGF0YSBjb250YWluZXIuIFRvIHNoYXJlIHlvdXIgZGF0YSwgeW91IG5lZWQgdG8gY3JlYXRlIGFuIEFtcGhvcmEgdGhlbiBmaWxsIGl0IHdpdGggd2hhdGV2ZXIgZGF0YSB5b3Ugd2FudC4iKSxtZHgoImgyIix7ImlkIjoiY3JlYXRlLXRoZS1hbXBob3JhIn0sIkNyZWF0ZSB0aGUgQW1waG9yYSIpLG1keCgicCIsbnVsbCwiTmF2aWdhdGUgdG8gdGhlICIsbWR4KCJpbmxpbmVDb2RlIix7cGFyZW50TmFtZToicCJ9LCJTaGFyZSIpLCIgcGFnZSwgYW5kIHlvdSB3aWxsIGdldCB0aGUgc2NyZWVuIGJlbG93IiksbWR4KCJwIixudWxsLG1keCgiaW1nIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsic3JjIjoiL2ltZy9uYXZfY3JlYXRlX2FtcGhvcmEucG5nIiwiYWx0IjoiTmF2IGNyZWF0ZSBhbXBob3JhIn0pKSksbWR4KCJibG9ja3F1b3RlIixudWxsLG1keCgicCIse3BhcmVudE5hbWU6ImJsb2NrcXVvdGUifSwiQXQgdGhpcyBzdGFnZSwgeW91IGNhbiBkZXNjcmliZSB0aGUgQW1waG9yYSwgYnV0ICIsbWR4KCJlbSIse3BhcmVudE5hbWU6InAifSwibm90IHlldCIpLCIgYWRkIGFueSBkYXRhLiBUaGF0IGNvbWVzIGxhdGVyLiIpKSxtZHgoInAiLG51bGwsIkdpdmUgeW91ciBBbXBob3JhIGEgTmFtZSwgRGVzY3JpcHRpb24sIFByaWNlLCBhbmQgR2VvLUxvY2F0aW9uLiBZb3UgY2FuIHNlYXJjaCBmb3IgbG9jYXRpb25zLCBvciBqdXN0IGVudGVyIHRoZSBMYXQvTG9uIG1hbnVhbGx5LiBUaGVzZSBuZWVkIHRvIGJlIGVudGVyZWQgaW50byB0aGUgZmllbGRzIGJlbG93LiBZb3Ugc2hvdWxkIGFsc28gbGFiZWwgaXQgd2l0aCBkYXRhIHR5cGUsIGNyb3AgdHlwZSBldGMgYW5kIGFsc28gc2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBUZXJtcyBhbmQgQ29uZGl0aW9ucy4iKSxtZHgoInAiLG51bGwsIkFzIEFtcGhvcmFzIGhhdmUgc3RhbmRhcmRpc2VkIG1ldGFkYXRhLCBwbGVhc2UgZW5zdXJlIGFsbCBmaWVsZHMgYXJlIGNvcnJlY3Qgc28gb3RoZXJzIGNhbiBmaW5kIGFuZCB1c2UgeW91ciBBbXBob3JhLiIpLG1keCgiaDIiLHsiaWQiOiJzZXQtdGVybXMtYW5kLWNvbmRpdGlvbnMifSwiU2V0IHRlcm1zIGFuZCBjb25kaXRpb25zIiksbWR4KCJwIixudWxsLCJZb3UgY2FuIHNldCB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZm9yIGVhY2ggQW1waG9yYSB3aGVuIHlvdSBjcmVhdGUgaXQuIFlvdSBjYW4gZWl0aGVyIGRvIHRoaXMgd2l0aCB0aGUgd2ViIGludGVyZmFjZSBvciBwcm9ncmFtYXRpY2FsbHkgd2l0aCB0aGUgQVBJIChqdXN0IHVzZSB0aGUgcmlnaHQgSUQpLiIpLG1keCgicCIsbnVsbCwiSWYgeW91IG5lZWQgdG8gY3JlYXRlIGEgbmV3IHRlcm1zIGFuZCBjb25kaXRpb25zIGRvY3VtZW50LCB5b3UgY2FuIGNyZWF0ZSBpdCBpbiB5b3VyIG9yZ2FuaXNhdGlvbiBwYWdlLiIpLG1keCgiaDIiLHsiaWQiOiJ0aXBzLWZvci1iZXN0LXByYWN0aWNlIn0sIlRpcHMgZm9yIGJlc3QgcHJhY3RpY2UiKSxtZHgoInAiLG51bGwsIlRoZXJlIGFyZSBzZXZlcmFsIGtleSBmZWF0dXJlcyB0byBpbmNsdWRlIHdoZW4gY3JlYXRpbmcgYSBjb21wcmVoZW5zaXZlIGFuZCBkZXNjcmlwdGl2ZSBBbXBob3JhOiIpLG1keCgiaDQiLHsiaWQiOiJuYW1lIn0sIk5hbWUiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgicCIse3BhcmVudE5hbWU6ImxpIn0sIkJlIGRlc2NyaXB0aXZlIGJ1dCBjb25jaXNlIGFib3V0IHRoZSBpbmZvcm1hdGlvbiBjb250YWluZWQgaW4gdGhlIEFtcGhvcmEiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSwiSW5jbHVkZSB0aGUgcmVnaW9uLCB3aXRoIHN0YXRlIGlmIGFwcGxpY2FibGUiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSwiVHJ5IHRvIGF2b2lkIG92ZXJseSB0ZWNobmljYWwgdGVybXMgd2hlcmUgcG9zc2libGUqIikpKSxtZHgoImg0Iix7ImlkIjoiZGVzY3JpcHRpb24ifSwiRGVzY3JpcHRpb246IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiSW5kaWNhdGUgd2hlcmUgdGhlIGRhdGEgY2FtZSBmcm9tLCBpbmNsdWRpbmcgYWxsIHNvdXJjZXMsIGFuZCB3aGF0IHRoZSB0YXJnZXQgcmVnaW9uIGlzLiIpLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LCJEZXNjcmliZSBlYWNoIHNpZ25hbCBjb250YWluZWQgaW4gdGhlIEFtcGhvcmEgaW5jbHVkaW5nIHVuaXRzLiIpKSxtZHgoImg0Iix7ImlkIjoicHJpY2UifSwiUHJpY2U6IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiQmUgc3VyZSB0byBwdXQgdGhlIGNvcnJlY3QgbW9udGhseSBjb3N0LCBvciAwIGZvciBmcmVlIGRhdGEiKSksbWR4KCJoNCIseyJpZCI6ImxhYmVscyJ9LCJMYWJlbHM6IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LCJZb3UgY2FuIGFkZCB1cCB0byAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCIxMCBsYWJlbHMiKSwiLCBlYWNoIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiAiLG1keCgic3Ryb25nIix7cGFyZW50TmFtZToicCJ9LCIxMiBjaGFyYWN0ZXJzIiksIi4iKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSwiVXNlIHNldmVyYWwgc2VtYW50aWNhbGx5IHJlbGV2YW50IGxhYmVscywgYXMgdGhleSBhcmUgaW5kZXhlZCB3aGVuIHNlYXJjaGluZy4gRm9yIGV4YW1wbGU6IiksbWR4KCJ1bCIse3BhcmVudE5hbWU6ImxpIn0sbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sInN0cnVjdHVyZSBvZiB0aGUgZGF0YSAoZS5nLiB0YWJ1bGFyLCBpbWFnZSwgdGltZSBzZXJpZXMpIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sInRoZSBkYXRhIGNhdGVnb3J5IChlLmcuIHdlYXRoZXIsIE5EVkkpIikpKSksbWR4KCJoNCIseyJpZCI6InRzY3MifSwiVHMmQ3M6IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxtZHgoInAiLHtwYXJlbnROYW1lOiJsaSJ9LCJDaGVjayBkb2N1bWVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhIHNvdXJjZSBhbmQgcHVibGlzaCB0aGUgZGF0YSB1bmRlciB0aGUgcmlnaHQgdGVybXMgYW5kIGNvbmRpdGlvbnMiKSksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJwIix7cGFyZW50TmFtZToibGkifSwiR28gdG8geW91ciBvcmdhbmlzYXRpb24gaG9tZXBhZ2UgYW5kIGFkZCBuZXcgVCZDcyBpZiB0aGUgcmVxdWlyZWQgVHMmQ3MgYXJlbid0IGFscmVhZHkgbGlzdGVkIikpKSxtZHgoImg0Iix7ImlkIjoiZ2VvbG9jYXRpb24ifSwiR2VvTG9jYXRpb246IiksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiVXNlIHRoZSBzZWFyY2ggYmFyIG9yIGRpcmVjdGx5IGVudGVyIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUgb2YgdGhlIHJlZ2lvbiBmb3Igd2hpY2ggdGhlIGRhdGEgYXJlIGFnZ3JlZ2F0ZWQiKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSwiSWYgdGhlcmUgaXMgbm8gc3BlY2lmaWMgcmVnaW9uIGZvciB0aGUgQW1waG9yYSB0aGVuIHVzZSB0aGUgbG9jYXRpb24gb2YgdGhlIGJvZHkgd2hpY2ggZ2VuZXJhdGVkIHRoZSBkYXRhIChlLmcuIHVzaW5nIHRoZSBNTEEgb2ZmaWNlIGluIE5vcnRoIFN5ZG5leSBmb3IgdGhlaXIgbmF0aW9uIHdpZGUgbGl2ZXN0b2NrIGRhdGEpIikpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}