{"remainingRequest":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/native_ints/microprediction.md","dependencies":[{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/native_ints/microprediction.md","mtime":1599492777889},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/.docusaurus/docusaurus-plugin-content-docs/site-docs-native-ints-microprediction-md-5fa.json","mtime":1599493348178},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/cache-loader/dist/cjs.js","mtime":1599485341520},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js","mtime":1599485341450},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1599485356244},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1599485355668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidtaWNyb3ByZWRpY3Rpb24nLHRpdGxlOidXb3JraW5nIHdpdGggTWljcm9wcmVkaWN0aW9uJyxzaWRlYmFyX2xhYmVsOidNaWNyb3ByZWRpY3Rpb24nfTtleHBvcnQgY29uc3QgbWV0YWRhdGE9eyJ1bnZlcnNpb25lZElkIjoibmF0aXZlX2ludHMvbWljcm9wcmVkaWN0aW9uIiwiaWQiOiJuYXRpdmVfaW50cy9taWNyb3ByZWRpY3Rpb24iLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiV29ya2luZyB3aXRoIE1pY3JvcHJlZGljdGlvbiIsImRlc2NyaXB0aW9uIjoiTWljcm9wcmVkaWN0aW9uIGlzIGEgbGVhZGluZyBvcGVuIHBsYXRmb3JtIHRvIHNoYXJlIGFuZCBzY29yZSB0aW1lIHNlcmllcyBtb2RlbHMuIE1pY3JvcHJlZGljdGlvbiBjYW4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL25hdGl2ZV9pbnRzL21pY3JvcHJlZGljdGlvbi5tZCIsInBlcm1hbGluayI6Ii9kb2NzL25hdGl2ZV9pbnRzL21pY3JvcHJlZGljdGlvbiIsImVkaXRVcmwiOiJodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZG9jdXNhdXJ1cy9lZGl0L21hc3Rlci93ZWJzaXRlL2RvY3MvbmF0aXZlX2ludHMvbWljcm9wcmVkaWN0aW9uLm1kIiwic2lkZWJhcl9sYWJlbCI6Ik1pY3JvcHJlZGljdGlvbiIsInNpZGViYXIiOiJzb21lU2lkZWJhciIsInByZXZpb3VzIjp7InRpdGxlIjoiU2lnbmFsIiwicGVybWFsaW5rIjoiL2RvY3MvZGVmaW5pdGlvbnMvc2lnbmFsIn19Oy8qIEBqc3ggbWR4ICovZXhwb3J0IGNvbnN0IHJpZ2h0VG9jPVt7dmFsdWU6J0dldHRpbmcgc3RhcnRlZCcsaWQ6J2dldHRpbmctc3RhcnRlZCcsY2hpbGRyZW46W119LHt2YWx1ZTonUGFuZGVtaWMnLGlkOidwYW5kZW1pYycsY2hpbGRyZW46W119LHt2YWx1ZTonR2VuZXJhbCBzdXBwb3J0JyxpZDonZ2VuZXJhbC1zdXBwb3J0JyxjaGlsZHJlbjpbXX1dO2NvbnN0IG1ha2VTaG9ydGNvZGU9bmFtZT0+ZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307Y29uc3QgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsYE1pY3JvcHJlZGljdGlvbiBpcyBhIGxlYWRpbmcgb3BlbiBwbGF0Zm9ybSB0byBzaGFyZSBhbmQgc2NvcmUgdGltZSBzZXJpZXMgbW9kZWxzLiBNaWNyb3ByZWRpY3Rpb24gY2FuYCksbWR4KCJ1bCIsbnVsbCxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQ2xlYW4gYW5kIGVucmljaCBsaXZlIGRhdGFgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgQWxlcnQgeW91IHRvIG91dGxpZXJzIGFuZCBhbm9tYWxpZXNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgUHJvdmlkZSB5b3Ugc2hvcnQgdGVybSBmb3JlY2FzdHNgKSxtZHgoImxpIix7cGFyZW50TmFtZToidWwifSxgSWRlbnRpZnkgcGF0dGVybnMgaW4gbW9kZWwgcmVzaWR1YWxzYCkpLG1keCgicCIsbnVsbCxgV2Ugd29yayB0b2dldGhlciB3aXRoIE1pY3JvcHJlZGljdGlvbiB0byBvZmZlciBBbXBob3JhIERhdGEgYXMgYW4gaW5idWlsdCBkYXRhIHN0b3JhZ2UgYW5kIGNvbGxhYm9yYXRpb24gdG9vbC5gKSxtZHgoImgyIix7ImlkIjoiZ2V0dGluZy1zdGFydGVkIn0sYEdldHRpbmcgc3RhcnRlZGApLG1keCgicCIsbnVsbCxgVG8gZ2V0IHN0YXJ0ZWQgdXNpbmcgQW1waG9yYSBhbmQgTWljcm9wcmVkaWN0aW9uIHRvZ2V0aGVyIHlvdSBuZWVkIHRvIGluc3RhbGwgdGhlIGFwcHJvcHJpYXRlIFNES3Mgd2l0aGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHkifSksYHBpcCBpbnN0YWxsIGFtcGhvcmEKYCkpLG1keCgicCIsbnVsbCxgYW5kIGApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHkifSksYHBpcCBpbnN0YWxsIG1pY3JvcHJlZGljdGlvbgpgKSksbWR4KCJwIixudWxsLGBZb3Ugd2lsbCBhbHNvIG5lZWQgYW4gQW1waG9yYSBEYXRhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCAocmVnaXN0ZXIgZm9yIGZyZWUgaGVyZSkgYXMgd2VsbCBhcyBhIGtleSBmb3IgTWljcm9wcmVkaWN0aW9uYCksbWR4KCJoMiIseyJpZCI6InBhbmRlbWljIn0sYFBhbmRlbWljYCksbWR4KCJwIixudWxsLGBZb3UgY2FuIHVzZSBBbXBob3JhIERhdGEgdG8gc3RvcmUgZGFpbHkgc25hcCBzaG90cyBvZiBhbGwgeW91ciBhZ2VudHMgYW5kIHRvIHNoYXJlIGFuZCB1c2Ugb3RoZXJzIHBhbmRlbWljIGRhdGEuIFRoaXMgc2F2ZXMgeW91ciBjb21wdXRhdGlvbmFsIGNvc3QsIGFuZCBnaXZlcyB5b3UgbW9yZSBkYXRhIHRvIHRyYWluIG1vZGVscyBvbiBhbmQgcmVzZWFyY2ggdGhlIGR5bmFtaWNzIG9mIHRoZSBzeXN0ZW0uYCksbWR4KCJwIixudWxsLGBUaGUgbGF0ZXN0IGNvZGUgZm9yIHVzaW5nIEFtcGhvcmEgd2l0aCBQYW5kZW1pYyBpcyBvbiBgLG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InAifSx7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vbWljcm9wcmVkaWN0aW9uL3BhbmRlbWljL2Jsb2IvbWFzdGVyL3BhbmRlbWljL2FtcGhvcmEucHkifSksYEdpdEh1YmApKSxtZHgoInAiLG51bGwsYFVzZSB0aGUgQW1waG9yYSBjYWxsYmFjayB3aXRoYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weSJ9KSxgZnJvbSBwYW5kZW1pYy5hbXBob3JhIGltcG9ydCBhbXBob3JhX2NhbGxiYWNrCmApKSxtZHgoInAiLG51bGwsYFlvdSB3aWxsIG5lZWQgdG8gc3RvcmUgeW91ciBBbXBob3JhIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXMgd2VsbCBhcyB0aGUgYCxtZHgoImlubGluZUNvZGUiLHtwYXJlbnROYW1lOiJwIn0sYGFtcGhvcmEgaWRgKSxgIGlmIHlvdSB3YW50IHRvIHB1c2ggeW91ciBkYXRhIHRvIGFuIGV4aXN0aW5nIEFtcGhvcmFgKSxtZHgoInAiLG51bGwsYEZ1bGwgY29kZSBmb3IgdXNpbmcgQW1waG9yYSB3aXRoIE1pY3JvcHJlZGljdGlvbiBpcyBiZWxvd2ApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHkifSksYApmcm9tIHBhbmRlbWljLmFtcGhvcmEgaW1wb3J0IGFtcGhvcmFfY2FsbGJhY2sKZnJvbSBwYW5kZW1pYy5leGFtcGxlX3BhcmFtZXRlcnMgaW1wb3J0IEhPTUVTSUNLCmZyb20gcGFuZGVtaWMuc2ltdWxhdGlvbiBpbXBvcnQgc2ltdWxhdGUKCmltcG9ydCBvcwoKCm9zLmVudmlyb25bImFtcGhvcmFfdXNlcm5hbWUiXSA9IHlvdXJfdXNlcm5hbWUKb3MuZW52aXJvblsiYW1waG9yYV9wYXNzd29yZCJdID0geW91cl9wYXNzd29yZApvcy5lbnZpcm9uWyJhbXBob3JhX2lkIl0gPSBleGlzdGluZ19hbXBob3JhX2lkIChvcHRpb25hbCkKCgojIyBTZXQgdXAgbG9nIG1ldHJpY3MKTl9TPTEKCiMgQ2hvb3NlIHBhcmFtZXRlciBzZXQKcGFyYW1fc2V0ID0gIkhPTUVTSUNLIgpwYXJhbXMgPSBIT01FU0lDSwogICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAKIyMgUnVuIHBhbmRlbWljIGFuZCBwdXNoIHRvIEFtcGhvcmEKZm9yIG5fcyBpbiByYW5nZShOX1MpOgogICAgYW1waG9yYV9ydW5faWQgPSBuX3MKICAgIAogICAgcHJpbnQoIlN0YXJ0aW5nIFNpbXVsYXRpb24uLi4iKQogICAgcHJpbnQobl9zKQogICAgb3MuZW52aXJvblsiYW1waG9yYV9ydW5faWQiXSA9IHN0cihuX3MpCiAgICBzaW11bGF0ZShwYXJhbXMsIGNhbGxiYWNrPWFtcGhvcmFfY2FsbGJhY2spCiAgICAKICAgIHByaW50KCJGaW5pc2hlZCBydW4iKQoKYCkpLG1keCgiaDIiLHsiaWQiOiJnZW5lcmFsLXN1cHBvcnQifSxgR2VuZXJhbCBzdXBwb3J0YCksbWR4KCJwIixudWxsLGBXZSBhcmUgbG9va2luZyB0byBvZmZlciBicm9hZGVyIHN1cHBvcnQgYW5kIGludGVncmF0aW9uIHdpdGggTWljcm9wcmVkaWN0aW9uLiBQbGVhc2UgY29tZSBiYWNrIGxhdGVyIGZvciBtb3JlIGRldGFpbHMgb3IgbGV0IHVzIGtub3cgd2hpY2ggcGFja2FnZXMgYXJlIGJlc3QgdG8gc3VwcG9ydGApKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}