{"remainingRequest":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/SDKs/python-upload-signal.md","dependencies":[{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/SDKs/python-upload-signal.md","mtime":1599492777885},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/.docusaurus/docusaurus-plugin-content-docs/site-docs-sd-ks-python-upload-signal-md-653.json","mtime":1599493348178},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/cache-loader/dist/cjs.js","mtime":1599485341520},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js","mtime":1599485341450},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1599485356244},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1599485355668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}