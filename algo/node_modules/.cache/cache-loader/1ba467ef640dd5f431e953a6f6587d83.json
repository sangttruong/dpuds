{"remainingRequest":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/faq.md","dependencies":[{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/faq.md","mtime":1599492777887},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/.docusaurus/docusaurus-plugin-content-docs/site-docs-faq-md-048.json","mtime":1599493348178},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/cache-loader/dist/cjs.js","mtime":1599485341520},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js","mtime":1599485341450},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1599485356244},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1599485355668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgdmFyIGZyb250TWF0dGVyPXtpZDonZmFxJyx0aXRsZTonRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMnLHNpZGViYXJfbGFiZWw6J0ZBUXMnfTtleHBvcnQgdmFyIG1ldGFkYXRhPXsidW52ZXJzaW9uZWRJZCI6ImZhcSIsImlkIjoiZmFxIiwiaXNEb2NzSG9tZVBhZ2UiOmZhbHNlLCJ0aXRsZSI6IkZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zIiwiZGVzY3JpcHRpb24iOiJUaGVzZSBhcmUgdGhlIG1vc3QgZnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMuIFBsZWFzZSByZWFkIHRoZXNlIGlmIHlvdSBhcmUgbmV3IHRvIEFtcGhvcmEuIiwic291cmNlIjoiQHNpdGUvZG9jcy9mYXEubWQiLCJwZXJtYWxpbmsiOiIvZG9jcy9mYXEiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RvY3VzYXVydXMvZWRpdC9tYXN0ZXIvd2Vic2l0ZS9kb2NzL2ZhcS5tZCIsInNpZGViYXJfbGFiZWwiOiJGQVFzIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJDb250ZW50cyIsInBlcm1hbGluayI6Ii9kb2NzL2NvbnRlbnRzIn0sIm5leHQiOnsidGl0bGUiOiJTaWduIHVwIiwicGVybWFsaW5rIjoiL2RvY3MvZ2V0X3N0YXJ0ZWQvc2lnbi11cCJ9fTsvKiBAanN4IG1keCAqL2V4cG9ydCB2YXIgcmlnaHRUb2M9W3t2YWx1ZTonSG93IGRvIEkgc2lnbiB1cD8nLGlkOidob3ctZG8taS1zaWduLXVwJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidIb3cgZG8gSSBzZWxsIGRhdGE/JyxpZDonaG93LWRvLWktc2VsbC1kYXRhJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidXaGVuIGRvIEkgZ2V0IHBhaWQ/JyxpZDond2hlbi1kby1pLWdldC1wYWlkJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidXaGF0IGRhdGEgY2FuIEkgc2VsbD8nLGlkOid3aGF0LWRhdGEtY2FuLWktc2VsbCcsY2hpbGRyZW46W119LHt2YWx1ZTonRG9lcyBBbXBob3JhIHZlcmlmeSBvciBtb2RpZnkgdGhlIGRhdGE/JyxpZDonZG9lcy1hbXBob3JhLXZlcmlmeS1vci1tb2RpZnktdGhlLWRhdGEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1doYXQgZGF0YSBjYW4gSSBidXk/JyxpZDond2hhdC1kYXRhLWNhbi1pLWJ1eScsY2hpbGRyZW46W119LHt2YWx1ZTonV2hhdCBmZWVzIGRvIEkgcGF5PycsaWQ6J3doYXQtZmVlcy1kby1pLXBheScsY2hpbGRyZW46W119LHt2YWx1ZTonV2hhdCBjdXJyZW5jeSBkb2VzIEFtcGhvcmEgdXNlPycsaWQ6J3doYXQtY3VycmVuY3ktZG9lcy1hbXBob3JhLXVzZScsY2hpbGRyZW46W119LHt2YWx1ZTonU29tZXRoaW5nIGVsc2Ugb24geW91ciBtaW5kPycsaWQ6J3NvbWV0aGluZy1lbHNlLW9uLXlvdXItbWluZCcsY2hpbGRyZW46W119XTt2YXIgbWFrZVNob3J0Y29kZT1mdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpe3JldHVybiBmdW5jdGlvbiBNRFhEZWZhdWx0U2hvcnRjb2RlKHByb3BzKXtjb25zb2xlLndhcm4oIkNvbXBvbmVudCAiK25hbWUrIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7cmV0dXJuIG1keCgiZGl2Iixwcm9wcyk7fTt9O3ZhciBsYXlvdXRQcm9wcz17cmlnaHRUb2M6cmlnaHRUb2N9O3ZhciBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZil7dmFyIGNvbXBvbmVudHM9X3JlZi5jb21wb25lbnRzLHByb3BzPV9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsWyJjb21wb25lbnRzIl0pO3JldHVybiBtZHgoTURYTGF5b3V0LF9leHRlbmRzKHt9LGxheW91dFByb3BzLHByb3BzLHtjb21wb25lbnRzOmNvbXBvbmVudHMsbWR4VHlwZToiTURYTGF5b3V0In0pLG1keCgicCIsbnVsbCwiVGhlc2UgYXJlIHRoZSBtb3N0IGZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zLiBQbGVhc2UgcmVhZCB0aGVzZSBpZiB5b3UgYXJlIG5ldyB0byBBbXBob3JhLiAiKSxtZHgoImgyIix7ImlkIjoiaG93LWRvLWktc2lnbi11cCJ9LCJIb3cgZG8gSSBzaWduIHVwPyIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBzaWduIHVwIGluc3RhbnRseSBhbmQgZm9yIGZyZWUgIixtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9pZGVudGl0eS5hbXBob3JhZGF0YS5jb20vUmVnaXN0ZXIifSksImhlcmUiKSwiLiBBZnRlciBmb2xsb3dpbmcgdGhlIHN0ZXBzIGluIHRoZSBsaW5rIHlvdSB3aWxsIGJlIHNpZ25lZCB1cCB0byBhIFBheS1hcy15b3UtZ28gcGxhbi4iKSxtZHgoInAiLG51bGwsIklmIHlvdSB3YW50IHRvIHNpZ24gdXAgdG8gQW1waG9yYSBHbGF6ZSwgc2VsZWN0IHRoZSBHbGF6ZSBwbGFuIGluIHRoZSBBY2NvdW50cyBwYWdlLiIpLG1keCgiaDIiLHsiaWQiOiJob3ctZG8taS1zZWxsLWRhdGEifSwiSG93IGRvIEkgc2VsbCBkYXRhPyIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBsaXN0IGRhdGEgZm9yIHNhbGUgYnkiKSxtZHgoInVsIixudWxsLG1keCgibGkiLHtwYXJlbnROYW1lOiJ1bCJ9LG1keCgiYSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6ImxpIn0seyJocmVmIjoiL2RvY3Mvc2hhcmVfZGF0YS9jcmVhdGUtYW1waG9yYSJ9KSwiQ3JlYXRpbmcgYSBjb250YWluZXIiKSwiIGZvciB5b3VyIGRhdGEgKGFuIEFtcGhvcmEpIiksbWR4KCJsaSIse3BhcmVudE5hbWU6InVsIn0sbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIvZG9jcy9zaGFyZV9kYXRhL2FkZC1maWxlIn0pLCJVcGxvYWRpbmciKSwiIG9yICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToibGkifSx7ImhyZWYiOiIvZG9jcy9zaGFyZV9kYXRhL2FkZC1zaWduYWwifSksImNvbm5lY3RpbmciKSwiIHRoZSBkYXRhIHlvdSB3ZW50IHRvIHNlbGwiKSksbWR4KCJwIixudWxsLCJZb3VyIGRhdGEgd2lsbCB0aGVuIGJlIGxpc3RlZCBmb3Igc2FsZS4gWW91IHdpbGwgYmUgbm90aWZpZWQgaWYgYW5kIHdoZW4geW91ciBkYXRhIGlzIHNvbGQuIERhdGEgY2FuIGJlIHNvbGQgbXVsdGlwbGUgdGltZXMuIiksbWR4KCJoMiIseyJpZCI6IndoZW4tZG8taS1nZXQtcGFpZCJ9LCJXaGVuIGRvIEkgZ2V0IHBhaWQ/IiksbWR4KCJwIixudWxsLCJXZSB3aWxsIHN0YXJ0IHByb2Nlc3NpbmcgeW91ciBwYXltZW50IHdpdGhpbiAyNCBob3VycyBvZiB5b3VyIGRhdGEgYmVpbmcgYm91Z2h0IGJ5IGEgdmVyaWZpZWQgdXNlci4gRGVwZW5kaW5nIG9uIHlvdXIgY291bnRyeSBhbmQgcGF5bWVudHMgc2V0IHVwLCB5b3UgbWF5IGJlIHBhaWQgd2l0aGluIDI0IGhvdXJzIG9yIHRoZSBuZXh0IGJ1c2luZXNzIGRheS4iKSxtZHgoImgyIix7ImlkIjoid2hhdC1kYXRhLWNhbi1pLXNlbGwifSwiV2hhdCBkYXRhIGNhbiBJIHNlbGw/IiksbWR4KCJwIixudWxsLCJZb3UgY2FuIGxpc3QgZGF0YSBmb3Igc2FsZSB0aGF0IHlvdSBvd24gb3IgaGF2ZSBwZXJtaXNzaW9uIHRvIHNlbGwuIFlvdSBhcmUgcmVzcG9uc2libGUgZm9yIGRldGVybWluaW5nIHRoaXMgYW5kIGVuc3VyaW5nIHRoYXQgdGhlIHJpZ2h0IHRlcm1zIG9mIHVzZSBhbmQgYWNjZXNzIGNvbnRyb2xzIGFyZSB1c2VkIGZvciB5b3VyIGRhdGEuIFlvdSBhbHNvIG11c3QgZW5zdXJlIHlvdXIgZGF0YSBjb250YWlucyBubyBpbGxlZ2FsIG9yIHByb2hpYml0ZWQgbWF0ZXJpYWwuIiksbWR4KCJwIixudWxsLCJZb3UgY2FuIGxpc3QgYW55IHR5cGUgb2YgZGF0YSB1cCB0byAxMDBHYiBwZXIgQW1waG9yYS4gUHJhY3RpY2FsbHkgdGhpcyBtZWFucyBtb3N0IGRhdGEgc2V0cyBleGNlcHQgR2Vub21pYyBhbmQgb3RoZXIgdmVyeSBsYXJnZSBkYXRhIHNldHMuIiksbWR4KCJoMiIseyJpZCI6ImRvZXMtYW1waG9yYS12ZXJpZnktb3ItbW9kaWZ5LXRoZS1kYXRhIn0sIkRvZXMgQW1waG9yYSB2ZXJpZnkgb3IgbW9kaWZ5IHRoZSBkYXRhPyIpLG1keCgicCIsbnVsbCwiQW1waG9yYSBEYXRhIFB0eSBMdGQgZG9lc24ndCB2ZXJpZnkgb3IgbW9kaWZ5IHRoZSBkYXRhIHVubGVzcyB3ZSBoYXZlIGEgc3BlY2lmaWMgYWdyZWVtZW50IHdpdGggeW91ciBvcmdhbmlzYXRpb24uIEl0IGlzIHVwIHRvIHRoZSBkYXRhIGJ1eWVyIHRvIGV4Y2VyY2lzZSBkdWUgZGlsbGlnZW5jZSB3aGVuIGJ1eWluZyBkYXRhLiBJdCBpcyB1cCB0byB0aGUgZGF0YSBzZWxsZXIgdG8gYmUgYXMgdHJhbnNwYXJlbnQgYXMgcG9zc2libGUgaW4gZGVzY3JpYmluZyB0aGUgZGF0YSBmb3Igc2FsZS4iKSxtZHgoImgyIix7ImlkIjoid2hhdC1kYXRhLWNhbi1pLWJ1eSJ9LCJXaGF0IGRhdGEgY2FuIEkgYnV5PyIpLG1keCgicCIsbnVsbCwiWW91IGNhbiBpbiBnZW5lcmFsIGJ1eSBhbnkgZGF0YSBvbiB0aGUgQW1waG9yYSBEYXRhIG1hcmtldHBsYWNlLiBTb21lIGRhdGEgc2V0cyBhcmUgcmVzdHJpY3RlZCB0byBjZXJ0YWluIG9yZ2FuaXNhdGlvbnMgKGFzIGRldGVybWluZWQgYnkgdGhlIGRhdGEgc2VsbGVyLikgIiksbWR4KCJwIixudWxsLCJXZSBjdXJyZW50bHkgcHJlZG9taW5hbnRseSBoYXZlIGFncmljdWx0dXJhbCBhbmQgZWNvbG9naWNhbCBkYXRhIGZvciBzYWxlLiIpLG1keCgiaDIiLHsiaWQiOiJ3aGF0LWZlZXMtZG8taS1wYXkifSwiV2hhdCBmZWVzIGRvIEkgcGF5PyIpLG1keCgicCIsbnVsbCwiWW91IGRvbid0IHBheSBhbnkgZmVlcyB3aGVuIHlvdSBidXkgZGF0YSwgb25seSB0aGUgcHJpY2Ugb2YgdGhlIEFtcGhvcmEuIFRoaXMgaXMgY2hhcmdlZCBvbiBhIHJlY3VycmluZyBiYXNpcy4iKSxtZHgoInAiLG51bGwsIklmIHlvdSBzZWxsIGRhdGEgb24gb3VyIG1hcmtldHBsYWNlLCB3ZSBjaGFyZ2UgYmV0d2VlbiAxMCUgYW5kIDIwJSBvZiB0aGUgZGF0YSBwcmljZSBkZXBlbmRpbmcgb24gaG93IG11Y2ggZGF0YSB5b3Ugc2VsbC4iKSxtZHgoInAiLG51bGwsIlByaWNpbmcgZm9yIEFtcGhvcmEgR2xhemUgaXMgc3RpbGwgdG8gYmUgY29uZmlybWVkLiIpLG1keCgiaDIiLHsiaWQiOiJ3aGF0LWN1cnJlbmN5LWRvZXMtYW1waG9yYS11c2UifSwiV2hhdCBjdXJyZW5jeSBkb2VzIEFtcGhvcmEgdXNlPyIpLG1keCgicCIsbnVsbCwiV2UgYXJlIEF1c3RyYWxpYW4gYmFzZWQgYW5kIHVzZSBBdXN0cmFsaWFuIGRvbGxhcnMuIFdlIG1heSBleHRlbmQgdGhpcyB0byBvdGhlciBtYWpvciBjdXJyZW5jaWVzIGluIHRoZSBmdXR1cmUuIiksbWR4KCJoMiIseyJpZCI6InNvbWV0aGluZy1lbHNlLW9uLXlvdXItbWluZCJ9LCJTb21ldGhpbmcgZWxzZSBvbiB5b3VyIG1pbmQ/IiksbWR4KCJwIixudWxsLCJTZW5kIHVzIGFuIGVtYWlsIGF0ICIsbWR4KCJhIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicCJ9LHsiaHJlZiI6Im1haWx0bzpjb250YWN0QGFtcGhvcmFkYXRhLmNvbSJ9KSwiY29udGFjdEBhbXBob3JhZGF0YS5jb20iKSwiLiIpKTt9O01EWENvbnRlbnQuaXNNRFhDb21wb25lbnQ9dHJ1ZTs="},null]}