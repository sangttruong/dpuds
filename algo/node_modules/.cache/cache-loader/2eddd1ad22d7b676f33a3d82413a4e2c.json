{"remainingRequest":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js??ref--11-1!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js??ref--11-2!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js??ref--11-3!/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/SDKs/python-create-amphora.md","dependencies":[{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/docs/SDKs/python-create-amphora.md","mtime":1599492777884},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/.docusaurus/docusaurus-plugin-content-docs/site-docs-sd-ks-python-create-amphora-md-4cf.json","mtime":1599493348179},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/cache-loader/dist/cjs.js","mtime":1599485341520},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/babel-loader/lib/index.js","mtime":1599485341450},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/mdx-loader/src/index.js","mtime":1599485356244},{"path":"/Users/sangtruong_2021/Documents/GitHub/dpuds/algo/amphoradata.github.io-source/node_modules/@docusaurus/plugin-content-docs/lib/markdown/index.js","mtime":1599485355668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9leHRlbmRzIGZyb20iL1VzZXJzL3Nhbmd0cnVvbmdfMjAyMS9Eb2N1bWVudHMvR2l0SHViL2RwdWRzL2FsZ28vYW1waG9yYWRhdGEuZ2l0aHViLmlvLXNvdXJjZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyI7aW1wb3J0IFJlYWN0IGZyb20ncmVhY3QnO2ltcG9ydHttZHh9ZnJvbSdAbWR4LWpzL3JlYWN0JztleHBvcnQgY29uc3QgZnJvbnRNYXR0ZXI9e2lkOidweXRob24tY3JlYXRlLWFtcGhvcmEnLHRpdGxlOidDcmVhdGluZyBhbiBBbXBob3JhIHdpdGggUHl0aG9uJyxzaWRlYmFyX2xhYmVsOidDcmVhdGUgYW4gQW1waG9yYSd9O2V4cG9ydCBjb25zdCBtZXRhZGF0YT17InVudmVyc2lvbmVkSWQiOiJTREtzL3B5dGhvbi1jcmVhdGUtYW1waG9yYSIsImlkIjoiU0RLcy9weXRob24tY3JlYXRlLWFtcGhvcmEiLCJpc0RvY3NIb21lUGFnZSI6ZmFsc2UsInRpdGxlIjoiQ3JlYXRpbmcgYW4gQW1waG9yYSB3aXRoIFB5dGhvbiIsImRlc2NyaXB0aW9uIjoiWW91IGNhbiBlYXNpbHkgY3JlYXRlIGFuIEFtcGhvcmEgd2l0aCB0aGUgcHl0aG9uIFNESy4gV2Ugd2lsbCBmaXJzdCBkZXNjcmliZSB0aGUgQW1waG9yYSB0aGF0IHdlIHdhbnQgdG8gY3JlYXRlLCB0aGVuIGNyZWF0ZSBpdC4iLCJzb3VyY2UiOiJAc2l0ZS9kb2NzL1NES3MvcHl0aG9uLWNyZWF0ZS1hbXBob3JhLm1kIiwicGVybWFsaW5rIjoiL2RvY3MvU0RLcy9weXRob24tY3JlYXRlLWFtcGhvcmEiLCJlZGl0VXJsIjoiaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2RvY3VzYXVydXMvZWRpdC9tYXN0ZXIvd2Vic2l0ZS9kb2NzL1NES3MvcHl0aG9uLWNyZWF0ZS1hbXBob3JhLm1kIiwic2lkZWJhcl9sYWJlbCI6IkNyZWF0ZSBhbiBBbXBob3JhIiwic2lkZWJhciI6InNvbWVTaWRlYmFyIiwicHJldmlvdXMiOnsidGl0bGUiOiJGaW5kIERhdGEgd2l0aCBweXRob24gU0RLIiwicGVybWFsaW5rIjoiL2RvY3MvU0RLcy9weXRob24tZmluZC1kYXRhIn0sIm5leHQiOnsidGl0bGUiOiJVcGxvYWRpbmcgYSBmaWxlIHdpdGggUHl0aG9uIiwicGVybWFsaW5rIjoiL2RvY3MvU0RLcy9weXRob24tdXBsb2FkLWZpbGUifX07LyogQGpzeCBtZHggKi9leHBvcnQgY29uc3QgcmlnaHRUb2M9W3t2YWx1ZTonRGVzY3JpYmUgQW1waG9yYScsaWQ6J2Rlc2NyaWJlLWFtcGhvcmEnLGNoaWxkcmVuOltdfSx7dmFsdWU6J1NhdmUgdGhlIElkIG9mIHlvdXIgbmV3IEFtcGhvcmEnLGlkOidzYXZlLXRoZS1pZC1vZi15b3VyLW5ldy1hbXBob3JhJyxjaGlsZHJlbjpbXX0se3ZhbHVlOidPdGhlciBjb2RlIHRvIGdldCB5b3Ugc3RhcnRlZCcsaWQ6J290aGVyLWNvZGUtdG8tZ2V0LXlvdS1zdGFydGVkJyxjaGlsZHJlbjpbXX1dO2NvbnN0IG1ha2VTaG9ydGNvZGU9bmFtZT0+ZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcyl7Y29uc29sZS53YXJuKCJDb21wb25lbnQgIituYW1lKyIgd2FzIG5vdCBpbXBvcnRlZCwgZXhwb3J0ZWQsIG9yIHByb3ZpZGVkIGJ5IE1EWFByb3ZpZGVyIGFzIGdsb2JhbCBzY29wZSIpO3JldHVybiBtZHgoImRpdiIscHJvcHMpO307Y29uc3QgbGF5b3V0UHJvcHM9e3JpZ2h0VG9jfTtjb25zdCBNRFhMYXlvdXQ9IndyYXBwZXIiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe2NvbXBvbmVudHMsLi4ucHJvcHN9KXtyZXR1cm4gbWR4KE1EWExheW91dCxfZXh0ZW5kcyh7fSxsYXlvdXRQcm9wcyxwcm9wcyx7Y29tcG9uZW50czpjb21wb25lbnRzLG1keFR5cGU6Ik1EWExheW91dCJ9KSxtZHgoInAiLG51bGwsYFlvdSBjYW4gZWFzaWx5IGNyZWF0ZSBhbiBBbXBob3JhIHdpdGggdGhlIHB5dGhvbiBTREsuIFdlIHdpbGwgZmlyc3QgZGVzY3JpYmUgdGhlIEFtcGhvcmEgdGhhdCB3ZSB3YW50IHRvIGNyZWF0ZSwgdGhlbiBjcmVhdGUgaXQuIGApLG1keCgicCIsbnVsbCxgQW1waG9yYXMgaGF2ZSBzdGFuZGFyZGlzZWQgbWV0YWRhdGEuIFRoaXMgZW5hYmxlcyB5b3UgdG8gcXVpY2tseSBzZWFyY2gsIG1hbmFnZSwgYW5kIGNvbnN1bWUgYSB2YXJpZXR5IG9mIGRpZmZlcmVudCBkYXRhdHlwZXMuYCksbWR4KCJoMiIseyJpZCI6ImRlc2NyaWJlLWFtcGhvcmEifSxgRGVzY3JpYmUgQW1waG9yYWApLG1keCgicCIsbnVsbCxgQW4gQW1waG9yYSBuZWVkcyBhIGZldyBrZXkgYml0cyBvZiBtZXRhZGF0YS4gVGhpcyBpbmNsdWRlcyBhIG5hbWUsIGRlc2NyaXB0aW9uLCBhbmQgYSBwcmljZS4gV2UgY2FuIGNyZWF0ZSB0aGVtIHdpdGggc2ltcGxlIHN0cmluZ3MgYCksbWR4KCJwcmUiLG51bGwsbWR4KCJjb2RlIixfZXh0ZW5kcyh7cGFyZW50TmFtZToicHJlIn0seyJjbGFzc05hbWUiOiJsYW5ndWFnZS1weSJ9KSxgIyB1c2UgbWVhbmluZ2Z1bCBuYW1lIGFuZCBkZXNjcmlwdGlvbnMgZm9yIHlvdXIgQW1waG9yYQpuYW1lID0gIkhpc3RvcmljYWwgaGF5IGFuZCBmZWVkIHlpZWxkcyIKZGVzY3JpcHRpb24gPSAiSGF5IHlpZWxkcyBvdmVyIGEgMTAgeWVhciBwZXJpb2QgZnJvbSAxOTk5IC0gMjAwOS5cXG4gRGF0YSBpcyBzdG9yZWQgaW4gY3N2IGZvcm1hdCwgYW5kIGFsbCBtZWFzdXJlbWVudHMgYXJlIGluIGtnLiIKIyBzZXQgYSBwcmljZSB5b3UgdGhpbmsgaXMgZmFpci4gSXQgd2lsbCBiZSBiaWxsZWQgbW9udGhseS4KcHJpY2UgPSAxMCAKYCkpLG1keCgicCIsbnVsbCxgV2UgY2FuIGFsc28gYWRkIHNvbWUgb3RoZXIgbWV0YWRhdGEuIFRoaXMgaW5jbHVkZXMgbGFiZWxzLCBsb2NhdGlvbiwgZGF0YSBxdWFsaXR5LCBlLnQuYy4gV2UgY2FuIGRvIHRoaXMgYXNgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5In0pLGAjIHVzZSBkZXNjcmlwdGl2ZSBsYWJlbHMgdG8gYXBwZWFyIG9uIHRoZSBBbXBob3JhIHN1Y2ggYXMgZGF0YSB0eXBlLCBzdHJ1Y3R1cmUgYW5kIG90aGVyIHJlbGV2YW50IGluZm9ybWF0aW9uCmxhYmVscyA9IFsiY3N2IiwidGltZXNlcmllcyIsImhheSIsInlpZWxkcyJdCgojIHNldCB0aGUgY29ycmVjdCBsb2NhdGlvbi4gVGhlc2UgY29vcmRpbmF0ZXMgYXJlIEFtcGhvcmEgRGF0YSdzIGhvbWUgb2ZmaWNlLgpsYXQgPSAtMjcuNDU3MTQKbG9uID0gMTUzLjA3MTA2CmApKSxtZHgoInAiLG51bGwsYFRoZW4gd2UgbmVlZCB0byBpbXBvcnQgdGhlIHJpZ2h0IG1vZHVsZSBmcm9tIHRoZSBTREtgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5In0pLGBmcm9tIGFtcGhvcmEuY2xpZW50IGltcG9ydCBBbXBob3JhRGF0YVJlcG9zaXRvcnlDbGllbnQKYCkpLG1keCgicCIsbnVsbCxgRmluYWxseSwgd2UgY2FuIGNyZWF0ZSBvdXIgbG9naW4gY2xpZW50IGFuZCBjcmVhdGUgdGhlIEFtcGhvcmFgKSxtZHgoInByZSIsbnVsbCxtZHgoImNvZGUiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwcmUifSx7ImNsYXNzTmFtZSI6Imxhbmd1YWdlLXB5In0pLGBjbGllbnQgPSBBbXBob3JhRGF0YVJlcG9zaXRvcnlDbGllbnQoY3JlZGVudGlhbHMpCmFtcGhvcmEgPSBjbGllbnQuY3JlYXRlX2FtcGhvcmEobmFtZT1uYW1lLCBkZXNjcmlwdGlvbj1kZXNjLCBsYWJlbHM9bGFiZWxzLCBwcmljZT1wcmljZSwgbGF0PWxhdCwgbG9uID0gbG9uKQpgKSksbWR4KCJwIixudWxsLGBZb3UgY2FuIGNoZWNrIHRoYXQgeW91ciBBbXBob3JhIHdhcyBjcmVhdGVkIGJ5IHByaW50aW5nIGl0cyBtZXRhZGF0YWApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHkifSksYHByaW50KGFtcGhvcmEubWV0YWRhdGEpCmApKSxtZHgoImgyIix7ImlkIjoic2F2ZS10aGUtaWQtb2YteW91ci1uZXctYW1waG9yYSJ9LGBTYXZlIHRoZSBJZCBvZiB5b3VyIG5ldyBBbXBob3JhYCksbWR4KCJwIixudWxsLGBBbXBob3JhIERhdGEgYXV0b21hdGljYWxseSBjcmVhdGVzIHVuaXF1ZSBpZGVudGlmaWVycyBmb3IgZXZlcnkgbmV3IEFtcGhvcmEgdG8gcHJldmVudCBhY2NpZGVudGFsIGR1cGxpY2F0aW9ucyBhbmQgaW5jb25zaXN0ZW5jaWVzLiBJdHMgZ29vZCBwcmFjdGljZSB0byBzYXZlIHRoZSBpZHMgb2YgbmV3IEFtcGhvcmEgeW91IGNyZWF0ZSwgc28geW91IGNhbiBlYXNpbHkgZmluZCB0aGVtIGxhdGVyLmApLG1keCgicHJlIixudWxsLG1keCgiY29kZSIsX2V4dGVuZHMoe3BhcmVudE5hbWU6InByZSJ9LHsiY2xhc3NOYW1lIjoibGFuZ3VhZ2UtcHkifSksYHdpdGggb3BlbignYW1waG9yYV9pZC50eHQnLCAndycpIGFzIGY6CiAgICBmLndyaXRlKGYne2FtcGhvcmEuYW1waG9yYV9pZH1cXG4nKQpgKSksbWR4KCJwIixudWxsLGBZb3VyIEFtcGhvcmEgaXMgY3JlYXRlZCwgYW5kIHJlYWR5IHRvIGZpbGwgd2l0aCBkYXRhIWApLG1keCgiaDIiLHsiaWQiOiJvdGhlci1jb2RlLXRvLWdldC15b3Utc3RhcnRlZCJ9LGBPdGhlciBjb2RlIHRvIGdldCB5b3Ugc3RhcnRlZGApLG1keCgicCIsbnVsbCxgWW91IGNhbiBnZXQgY29kZSB0byBnZXQgeW91IHN0YXJ0ZWQgYCxtZHgoImEiLF9leHRlbmRzKHtwYXJlbnROYW1lOiJwIn0seyJocmVmIjoiaHR0cHM6Ly9naXRodWIuY29tL2FtcGhvcmFkYXRhL3NhbXBsZXMvYmxvYi9tYXN0ZXIvZ2VuZXJpY190ZW1wbGF0ZXMvQ3JlYXRlX2FuX0FtcGhvcmEucHkifSksYGhlcmVgKSkpO307TURYQ29udGVudC5pc01EWENvbXBvbmVudD10cnVlOw=="},null]}